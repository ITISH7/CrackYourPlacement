Question 15 3 sum

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105

Approach 1 
Brute force :- use 3 loops find all possible solution , sort the solution put it in a set to just make sure its unique than push all set elements in vector and return the vector 

 time complexity :O(n^3) +O(logM ) space :- O(N)+O(M) bad solution

Approach 2
3 pointers
We are going to 3 pointers approach in this 
step 1 : - sort the vector 
step 2:- start a loop from 0 to size ,(index of loop will act as first pointer )
step 3: initialise j and k as i+1 and size-1 respectivly they will act as other 2 pointers

now just create a while loop with condition j<k and move the pointer in such a way that you move close toward zero

Solution
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int size = nums.size();
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<size;i++){
            if(i>0 && nums[i-1]==nums[i]) continue;
            int j=i+1;
            int k=size-1;
            while(j<k){
                int output = nums[i]+nums[j]+nums[k];
                if(output<0){
                    j++;
                }
                else if(output>0){
                    k--;
                }
                else{
                    vector<int> temp = {nums[i],nums[j],nums[k]};
                    j++;
                    k--;
                    ans.push_back(temp);
                    while(j<k&&nums[j]==nums[j-1]){
                        j++;
                    }
                    while(j<k&&nums[k]==nums[k+1]){
                        k--;
                    }
                }
            }
        }
        return ans;

    }
};