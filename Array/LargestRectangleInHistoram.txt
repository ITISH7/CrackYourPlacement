Leetcode Question :- 84

Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4

Approach :-

 2 vector create ker lete hai  next or previous name se  ye dono vector position bataAge ki breadth ki value kaha se kaha tak hogi 

eg :- 
heights = [2,1,5,6,2,3];
next = [1,-1,4,4,-1,-1];
previous=[-1,-1,1,2,1,4];

ye kese aai ? apan ek function banate hai jo vector<int> return kerega
 ye function check kerega ki next smallest element konsa hai jaise ki 

 agar next vali vector ki bat kere to apan agar right -> left aaAge to  apan ko sabse pehle 3 milega uske right me koi bhi element ni hai jo chota ho to apan uski position pe -1 rakh denge 

 isko nikalne ke liye apan stack ki help lenge 

 stack ko -1 se pehle se initialise ker denge now check kerege agar
 stack.top() !=-1 && stack.top() pe jo index hai uski value agar current value se zada hogi to stack ko pop kerte rahege jab tak kam value na mil jaA  or jaise hi kam value milege wo inner loop band ker denge or next[i] me wo index store ker lenge or stack me wo index push ker denge 

 last me vector return ker denge 

same previous ke liye bhi kerege 
fir area calculate ker lenge 

and max Area return ker denge

Solution:- 

class Solution {
public:
    vector<int> nextSmallerElement(vector<int>& arr, int n) {
        stack<int> st;
        st.push(-1);
        vector<int> ans(n);
        for (int i = n - 1; i >= 0; i--) {
            while (st.top()!=-1&&arr[st.top()] >= arr[i]) {
                st.pop();
            }
            ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }
    vector<int> PreviousSmallerElement(vector<int>& arr, int n) {
        stack<int> st;
        st.push(-1);
        vector<int> ans(n);
        for (int i = 0; i < n; i++) {
            while (st.top()!=-1&& arr[st.top()] >= arr[i]) {
                st.pop();
            }
            ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }
    int largestRectangleArea(vector<int>& heights) {
        int size = heights.size();
        vector<int> next(size);
        next = nextSmallerElement(heights,size);
        vector<int> previous(size);
        previous = PreviousSmallerElement(heights , size);
        int maxArea = INT_MIN;
        for (int i = 0; i < size; i++) {
            int l = heights[i];
            if (next[i] == -1) {
                next[i] = size;
            }
            int b = next[i] - previous[i] - 1;
            int area = l * b;
            if (area > maxArea) {
                maxArea = area;
            }
        }
        return maxArea;
    }
};

TimeComplexity :- O(3n)->O(n);
space TimeComplexity:- O(2n);
