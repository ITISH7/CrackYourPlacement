Question 18 leet code
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109

Solution 
Approach :- Exact same as 3sum  problem 4 pointers 

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        int size=nums.size();
        sort(nums.begin(),nums.end());
        for(int i=0;i<size-3;i++){
            if(i>0&&nums[i-1]==nums[i]){
                continue;
            }
            for(int j=i+1;j<size-2;j++){
                if(j!=i+1&&nums[j-1]==nums[j]){
                    continue;
                }
                int k=j+1;
                int l= size-1;
                while(k<l){
                    long long output = nums[i];
                    output+=nums[j];
                    output+=nums[k];
                    output+=nums[l];
                    if(output==target){
                        vector<int> temp = {nums[i],nums[j],nums[k],nums[l]};
                        ans.push_back(temp);
                        k++;
                        l--;
                        while(k<l && nums[k-1]==nums[k]){
                            k++;
                        }
                        while(k<l && nums[l]==nums[l+1]){
                            l--;
                        }
                    }
                    else if(output<target){
                        k++;
                    }
                    else{
                        l--;
                    }
                }
            }
        }
        return ans;

    }
};
