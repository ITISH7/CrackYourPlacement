Question 442 leetcode

Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:

Input: nums = [1,1,2]
Output: [1]
Example 3:

Input: nums = [1]
Output: []
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
Each element in nums appears once or twice.

Approach 1 
use a extra map to store the count of variable and if that i greater than 1 than push that element into array and return that array

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> ans;
        unordered_map<int ,int>map;
        int size=nums.size();
        for(int i=0;i<size;i++){
            map[nums[i]]++;
        }
        for(auto elem: map){
            if(elem.second>1){
                ans.push_back(elem.first);
            }
        }
        return ans;
    }
};

but it will not follow the constant space condition 

Approach 2
using vising method  as their is a constraint that their are no negative numbers in array as you can see as well as numbers are not greater than n 

so you can use visiting method here
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int>ans;
        int n=size(nums);
        for(int i=0;i<n;i++){
            int x=abs(nums[i]);
            // as we know a number can be in range 1-n and range is 0 to n-1 so we are not using x instead we are just using x-1
            
            if(nums[x-1]<0){
                
                ans.push_back(x);
            }
            nums[x-1]*=-1;
        }
        return ans;
    }
};