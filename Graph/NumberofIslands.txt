Leetcode :- 200

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

Solution:- 
using bfs  

class Solution {
private:
    void bfs(int curr_row, int curr_col, vector<vector<int>>& visited,
             vector<vector<char>>& grid, int total_row, int total_col) {
        visited[curr_row][curr_col] = 1;
        queue<pair<int, int>> q;
        q.push({curr_row, curr_col});
        while (!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            // traversal
            int arrX[4] = {1,0,-1,0};
            int arrY[4] = {0,-1,0,1};

            
                for (int k= 0;k <4; k++) {
            
                    int new_row = row + arrX[k];
                    int new_col = col + arrY[k];
                    if (new_row >= 0 && new_row < total_row && new_col >= 0 &&
                        new_col < total_col &&grid[new_row][new_col] == '1'&& !visited[new_row][new_col] 
                        ) {
                        visited[new_row][new_col] = 1;
                        q.push({new_row, new_col});
                    }
                }
            
        }
    }

public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n, vector<int>(m, 0));
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!visited[i][j] && grid[i][j] == '1') {
                    bfs(i, j, visited, grid, n, m);
                    count++;
                }
            }
        }
        return count;
    }
};


Approach 2 :-
using dfs

class Solution {
private:
    void dfs(int curr_row, int curr_col, vector<vector<int>>& visited,
             vector<vector<char>>& grid, int total_row, int total_col) {

        // traversal ;
        if (curr_row < 0 || curr_row >= total_row || curr_col < 0 ||
            curr_col >= total_col || grid[curr_row][curr_col] == '0' ||
            visited[curr_row][curr_col] == 1) {
            return;
        }
        visited[curr_row][curr_col] = 1;
        dfs(curr_row + 1, curr_col, visited, grid, total_row, total_col);
        dfs(curr_row - 1, curr_col, visited, grid, total_row, total_col);
        dfs(curr_row, curr_col + 1, visited, grid, total_row, total_col);
        dfs(curr_row, curr_col - 1, visited, grid, total_row, total_col);
    }

public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n, vector<int>(m, 0));
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!visited[i][j] && grid[i][j] == '1') {
                    dfs(i, j, visited, grid, n, m);
                    count++;
                }
            }
        }
        return count;
    }
};