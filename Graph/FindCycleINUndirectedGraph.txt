class Solution {
  public:
    bool bfs(int node , int V  ,vector<int> adj[] , int visited[] ){
        queue<pair<int,int>> q;
        q.push({node,-1});
        visited[node]=1;
        while(!q.empty()){
            int curr_element = q.front().first;
            int parent = q.front().second;
            q.pop();
            for(auto it : adj[curr_element]){
                if(!visited[it]){
                  q.push({it,curr_element});
                    visited[it]=1;  
                }
                else if(parent!= it){
                    return true;
                }
            }
        }
        return false;
    };
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        int visited[V]={0};
        //solving using bfs;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(bfs(i,V,adj,visited)){
                    return true;
                }
                
            }
        } 
            
        
        return false ; 
    }
};



dfs solution


class Solution {
  public:
    bool bfs(int node , int V  ,vector<int> adj[] , int visited[] ){
        visited[node]=1;
        for(auto it : adj[node]){
            if(visited[it]==0){
                if(bfs(it,node,adj,visited)==true){
                    return true;
                }
            }
            else if(it!=V){
                return true;
            }
        }
        return false;
    };
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        int visited[V]={0};
        //solving using bfs;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(bfs(i,-1,adj,visited)){
                    return true;
                }
                
            }
        } 
            
        
        return false ; 
    }
};