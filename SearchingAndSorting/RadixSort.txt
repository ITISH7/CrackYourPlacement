Question link :-
https://www.geeksforgeeks.org/problems/radix-sort/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card

Given an array arr[] of size N, use Radix Sort Algorithm to sort arr[] in ascending order.

Example 1:

Input :
N = 4
arr[] = {1, 9, 345, 2}

Output: 1 2 9 345

Example 2:

Input :
N = 10
arr[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}

Output: 1 2 3 4 5 6 7 8 9 10

Your Task:  
You dont need to read input or print anything. Complete the function radixSort() which takes arr[] and N as input parameters and sorts arr[] in-place. 


Expected Time Complexity: O(N * K) where K is the number of bits required to store each key.
Expected Auxiliary Space: O(N + K)


Constraints:
1 ≤ N ≤ 10^3

Solution:-

int findMax(int arr[],int n){
    int max =INT_MIN;
    for(int i=0;i<n;i++){
        if(arr[i]>max){
            max= arr[i];
        }
    }
    return max;
}
void countingsort(int arr[],int n,int lastbit){
    int output[n];
    int getCountOfEachBit[10]={0};
    for(int i = 0;i<n;i++){
        getCountOfEachBit[(arr[i]/lastbit)%10]++;
    }
    for(int i=1;i<10;i++){
        getCountOfEachBit[i]+= getCountOfEachBit[i-1];
    }
    for(int i = n-1 ; i>=0;i--){
        output[getCountOfEachBit[(arr[i]/lastbit)%10]-1] = arr[i];
        getCountOfEachBit[(arr[i]/lastbit)%10]--;
    }
    for(int i=0;i<n;i++){
        arr[i]=output[i];
    }
    
}

void radixSort(int arr[], int n) 
{ 
   int m = findMax(arr,n);
   for(int lastbit=1;m/lastbit>0;lastbit*=10){
       countingsort(arr,n,lastbit);
   }
} 