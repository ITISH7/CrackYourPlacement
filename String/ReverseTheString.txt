Leetcode :-151

Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
 

Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?

Approach:-
space = O(1);
me sabse pehle puri string ko reverse ker dunga then 
me jab tak space ni aati tab tak s[right]= s[i] dalta rahuga and then me sath hi right and i ko increment bhi kerta rahuga;

then i will reverse it again and jump to next word 


class Solution {
public:
    string reverseWords(string s) {
        reverse(s.begin(),s.end());
        int n=s.size();
        int left=0;
        int right=0;
        int i=0;
        while(i<n){
            while(i<n && s[i]==' ')i++;
            if(i==n)break; // to stop index going out of bounds
            while(i<n && s[i]!=' '){
                s[right++]=s[i++];
            }

            reverse(s.begin()+left,s.begin()+right);
            s[right++]=' ';
            left=right;
            i++;
        }
        s.resize(right-1);
        return s;
    }
};

Approach 2:- using stack 

me ek string lunga usme characters ko store kerate jauga and jab space milegi to me us word ko stack me push ker dunga 

then me jab tak stack ki size ki value 1 ni hojati tab tak ek or string me stack ke top ko concatinate kerta rahuga with space 

reverse = reverse + st.top() +" ";

then me last element bhi push ker ke reverse ko return ker dunga

class Solution {
public:
    string reverseWords(string s) {
        stack<string> st;
        string word = "";
        string result = "";
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == ' ') {
                if (!word.empty()) {
                    st.push(word);
                    word = "";
                }
            } else {
                word += s[i];
            }
        }
        if (!word.empty()) {
            st.push(word);
        }
        while (st.size() != 1) {
            result += st.top() + " ";
            st.pop();
        }
        return result;
    }
};