Question link :- 
https://www.geeksforgeeks.org/find-the-number-of-islands-using-dfs/ 
solution:-
using bfs 

class Solution {
private:
    void bfs(int curr_row, int curr_col, vector<vector<int>>& visited,
             vector<vector<char>>& grid, int total_row, int total_col) {
        visited[curr_row][curr_col] = 1;
        queue<pair<int, int>> q;
        q.push({curr_row, curr_col});
        while (!q.empty()) {
            int row = q.first;
            int col = q.second;
            q.pop();
            // traversal
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    int new_row = row + i;
                    int new_col = col + j;
                    if (new_row >= 0 && new_row < total_row && new_col >= 0 &&
                        new_col < total_col && !visited[new_row][new_col] &&
                        grid[new_row][new_col] == '1') {
                        visited[new_row][new_col] = 1;
                        q.push({new_row, new_col});
                    }
                }
            }
        }
    }

public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n, vector<int>(m, 0));
        int count = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (!visited[i][j] && grid[i][j] == '1') {
                    bfs(i, j, visited, grid, n, m);
                    count++;
                }
            }
        }
        return count;
    }
};