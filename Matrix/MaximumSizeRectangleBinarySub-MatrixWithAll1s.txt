Maximum size rectangle binary sub-matrix with all 1s

link:-
https://www.geeksforgeeks.org/maximum-size-rectangle-binary-sub-matrix-1s/

or Maximal rectangle Leetcode :- 85

Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example 1:

Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1
 

Constraints:

rows == matrix.length
cols == matrix[i].length
1 <= row, cols <= 200
matrix[i][j] is '0' or '1'.

Approach :-

TimeComplexity :- O(N *(m+n));
me hrr row ko histogram manuga and uska area calculate keruga and jaise jaise row badti jaAgi mere histogram ki height kam zada hoti rahegi 

then me hrr row me histogram ki maz height calculate kerta rahuga 

and hrr row ke end me maxArea calculate ker lunga total histograms ka jo abhi tak form hue hai 


Solution:-

class Solution {
public:
    vector<int> getnextSmallest(vector<int>&heights,int n){
        vector<int> ans(n);
        stack<int> st;
        st.push(-1);
        for(int i=n-1;i>=0;i--){
            while(st.top()!=-1&& heights[st.top()] >= heights[i]){
                st.pop();
            }
            ans[i]=st.top();
            st.push(i);
        }
        return ans;
    }
    vector<int> getpreviousSmallest(vector<int>&heights,int n){
        vector<int> ans(n);
        stack<int> st;
        st.push(-1);
        for(int i=0;i<n;i++){
            while(st.top()!=-1&& heights[st.top()] >= heights[i]){
                st.pop();
            }
            ans[i]=st.top();
            st.push(i);
        }
        return ans;
    }
    int histogramArea(vector<int>&heights){
        int size = heights.size();
        vector<int> next(size);
        vector<int> previous(size);
        next = getnextSmallest(heights,size);
        previous = getpreviousSmallest(heights,size);
        int maxArea = INT_MIN;
        for(int i=0;i<size;i++){
            int l = heights[i];
            if(next[i]==-1){
                next[i]=size;
            }
            int b = next[i]-previous[i]-1;
            int area = l*b;
            if(area>maxArea){
                maxArea= area;
            }
        }
        return maxArea;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
     int size = matrix.size();
     int col = matrix[0].size();
     vector<int> histogram(col,0);
     int maxArea = INT_MIN;
     for(int i=0;i<size;i++){
        for(int j=0;j<histogram.size();j++){
            if(matrix[i][j] == '1'){
                histogram[j]++;
            }
            else{
                histogram[j]=0;
            }
        }
        int area = histogramArea(histogram);
        if(area>maxArea){
            maxArea = area;
        }
     }
     return maxArea;

    }
};